///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
// Модуль контейнера идентификаторов.
// 
// В ходе лексического анализа программы встреченные идентификаторы (не ключевые слова)
// копируются в этот контейнер и хранятся в виде единственного экземпляра. Таким образом,
// после лексического анализа не нужно держать в памяти весь текст программы. Для быстрой
// работы с идентификаторами им присваиваются уникальные целочисленные номера.
// 
// Версия: 1.0.1.0
// Дата последнего изменения: 20:43 29.01.2023
// 
// Автор: Маслов А.С. (https://github.com/ArtemMaslov).
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#ifndef IDENTIFIER_H
#define IDENTIFIER_H

#include "../../Modules/ErrorsHandling.h"
#include "../../Modules/ExtArray/ExtArray.h"
#include "../../Modules/ExtHeap/ExtHeap.h"
#include "../../LanguageGrammar/LanguageGrammar.h"

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

/// Начальный размер ExtHeap.
const size_t IdentifierNamesDefaultSize = 4096;

/// Отдельная запись о идентификаторе.
struct Identifier
{
	/// Уникальный номер идентификатора.
	size_t Id;
	/// Указатель на символьное представление идентификатора.
	char*  Name;
	/// Длина символьного представления.
	size_t NameLength;

	/// Используется на этапе компиляции. Показывает, где найти переменную в памяти.
	int    CompileMemoryOffset;
};

/// Таблица идентификаторов.
struct IdentifierTable
{
	/**
	 * @brief Записи о идентификаторах.
	 * ExtArray<Identifier>
	*/
	ExtArray Records;

	size_t CompileIdentInited;

	/**
	 * @brief Символьное представление идентификаторов.
	 * 
	 * Символьное представление идентификаторов хранится в виде последовательных 
	 * записей в расширяющейся кучу. 
	*/
	ExtHeap IdentifierNames;
};

/// Особые ситуации при работе модуля таблицы идентификаторов.
enum class IdentifierError
{
	/// Нет ошибок.
	NoErrors,
	/// Ошибка при выполнении конструктора ExtArray.
	ExtArray,
	/// Ошибка при выполнении конструктора ExtHeap.
	ExtHeap,
	/// Ошибка при добавлении элемента в ExtArray.
	ExtArrayAddElem,
	/// Ошибка при добавлении элемента в ExtHeap.
	ExtHeapAddElem,
};

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

/**
 * @brief  Конструктор таблицы идентификаторов.
 * 
 * @param table Указатель на таблицу идентификаторов.
 * 
 * @return IdentifierError::ExtArray,
 *         IdentifierError::ExtHeap,
 *         IdentifierError::NoErrors
*/
IdentifierError IdentifierTableConstructor(IdentifierTable* const table);

/**
 * @brief  Деструктор таблицы идентификаторов.
 * 
 * После вызова деструктора структуру можно повторно использовать.
 * 
 * @param table Указатель на таблицу идентификаторов.
*/
void IdentifierTableDestructor(IdentifierTable* const table);

/**
 * @brief  Добавить идентификатор в таблицу.
 * 
 * @param table      Указатель на таблицу идентификаторов.
 * @param name       Символьное представление идентификатора.
 * @param nameLength Длина символьного представления.
 * @param out_id     Выходной параметр - уникальный номер идентификатора.
 * 
 * @return 
*/
IdentifierError IdentifierTableAddElem(IdentifierTable* const table, const char* const name, const size_t nameLength, size_t* const out_id);

/**
 * @brief  Получить указатель на запись в таблице по уникальному номеру идентификатора.
 * 
 * @param table Указатель на таблицу идентификаторов.
 * @param id    Номер идентификатора.
 * 
 * @return Указатель на запись в таблице.
*/
const Identifier* IdentifierGetById(const IdentifierTable* const table, const size_t id);

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#endif // !IDENTIFIER_H