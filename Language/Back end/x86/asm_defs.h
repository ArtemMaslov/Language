///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
// Модуль ассемблерного представления.
//
// Основные определения типов данных.
//
// Версия: 1.0.0.0
// Дата последнего изменения: 17:35 08.02.2023
// 
// Автор: Маслов А.С. (https://github.com/ArtemMaslov).
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#ifndef ASM_DEFS_H
#define ASM_DEFS_H

#include <stdint.h>

#include "../../Modules/ExtArray/ExtArray.h"
#include "../../Modules/ExtHeap/ExtHeap.h"

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#define ASM_CMD(cmd, ...) cmd,
/// Тип ассемблерной команды.
enum class AsmCmdType
{
	label = -2,
	null  = -1,

#include "asm_cmd_names.inc"
};
#undef ASM_CMD

#define ASM_REG(reg, ...) reg,
/// Тип регистра x86.
enum class AsmRegType
{
	null = -1,

#include "asm_regs.inc"
};
#undef ASM_REG

/// Тип аргумента команды.
enum class AsmArgType
{
    /// Нет аргументов.
	Null  = 0,
    /// Аргументом является регистр.
	Reg   = 1,
    /// Аргументом является адрес памяти.
	Mem   = 2,
    /// Аргументом является число.
	Imm   = 3,
    /// Аргументом является метка.
	Label = 4,
};

/// Структура аргумента.
struct AsmArg
{
    /// Тип аргумента.
	AsmArgType  Type;
    /// Значение используемого регистра.
	AsmRegType  Reg;
    /// Числовой аргумент.
	int32_t     Imm;
    /// Метка.
	const char* Label;
};

/// Кодировка ассемблерной команды в байтах.
struct AsmCode
{
	// Бинарное представление команды. Размер массива вмещает самую длинную команду.
	// Prefixes[0|1|2|3|4] + Opcode[1|2] + MemRM[0|1] + SIB[0|1] + Displacement[0|1|2|4] + Immediate[0|1|2|4].
	uint8_t Code[4 + 2 + 1 + 1 + 4 + 4];
	// Актуальный размер команды в байтах.
	size_t  CodeSize;
};

/// Структура команды.
struct AsmCmd
{
    /// Тип команды.
	AsmCmdType Type;

    /// Первый аргумент.
	AsmArg     Arg1;
    /// Второй аргумент.
	AsmArg     Arg2;

    /// Кодировка команды.
	AsmCode    Code;
};

/// Тип кодировки байта.
/// Используется для описания кодировки команды и дальнейшей автоматической генерации байт-кода.
enum class AsmByteType
{
	// Данный байт не используется.
	Null,
	// 8-ь бит указаны.
	Code,
	// 7-ь бит указаны, 8-ой бит выбирается автоматически.
	CodeW,
	// 2-а бита указаны, 3 и 3 бита выбираются автоматически.
	CodeRegReg,
	// Все биты выбираются автоматически.
	ModeRegRm,
	// 5-ь бит указаны, 3 бита выбираются автоматически.
	CodeReg,
	// 2 бита выбираются автоматически, 3 бита указаны, 3 бита выбираются автоматически.
	ModeCodeRm,
	// 1 байт, константа.
	Imm8,
	// 2 байта, константа.
	Imm16,
	// 4 байта, константа.
	Imm32,
};

/// Описание кодировки команды для дальнейшего автоматического преобразования в байт-код.
struct AsmCmdCode
{
	// Тип команды. Мнемоническое название.
	AsmCmdType Type;
	// Тип 1 аргумента.
	AsmArgType Arg1Type;
	// Тип 2 аргумента.
	AsmArgType Arg2Type;

	// Массив байт, кодирующих префиксы.
	uint8_t Prefixes[4];
	// [0-4] Количество записанных в Prefixes байт.
	uint8_t PrefixesSize;

	// Массив байт, кодирующих команду.
	// Opcode[1|2] + ModeR/M[0|1] + SIB[0|1]
	uint8_t Code[4];
	// [1|2] Размер Opcode.
	uint8_t OpcodeSize;
	// [0|1] Есть ли ModeR/M байт в команде.
	uint8_t ModeRmSize;
	// [0|1] Есть ли SIB байт в команде.
	uint8_t SibSize;

	// [0|1|2|4] Размер непосредственного значения в команде.
	uint8_t ImmSize;

	// [Code|CodeW] Тип последнего байта Opcode.
	AsmByteType OpcodeLastByteType;
	// [CodeRegReg|ModeRegRm|CodeReg|ModeCodeRm] Тип байта ModeR/M.
	AsmByteType ModeRmType;
};

/// Настройка компиляции. Тип создаваемого листинга.
struct AsmListingType
{
    /// Выводить в листинг ассемблерные команды.
	uint8_t Commands : 1;
    /// Выводить в листинг байт-код.
	uint8_t Codes    : 1;
};

/// Представление байта ModRm.
union AsmModRmByte
{
    /// Значение байта.
	uint8_t Value;

    /// У команды два аргумента - регистры.
	struct
	{
		uint8_t reg2 : 3;
		uint8_t reg1 : 3;
		uint8_t code : 2;
	} CodeRegReg;

    /// Команда работает с памятью и регистром.
	struct
	{
		uint8_t rm   : 3;
		uint8_t reg  : 3;
		uint8_t mode : 2;
	} ModeRegRm;

    /// Команда работает с памятью.
	struct
	{
		uint8_t rm   : 3;
		uint8_t code : 3;
		uint8_t mode : 2;
	} ModeCodeRm;

    /// Команда работает с регистром.
	struct
	{
		uint8_t reg  : 3;
		uint8_t code : 5;
	} CodeReg;

    /// Команда выполняет переход/вызов процедуры (jmp/call).
	struct
	{
		uint8_t cond : 4;
		uint8_t code : 4;
	} CondJmp;
};

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#endif // !ASM_DEFS_H