#ifndef TEXT_H
#define TEXT_H

//***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\ 
//***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\ 

#include <stdio.h>

#include "../ErrorsHandling.h"

//***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\ 
//***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\ 

struct Text
{
	/// Размер текста.
	size_t Size;
	/// Указатель на начало текста. Текст должен заканчиваться '\0'
	char*  Data;
	/// Индикатор, был ли считан файл.
	bool   Readed;
};

//***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\ 
//***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\ 

/**
 * @brief Конструктор текста.
 * 
 * @param text Указатель на структуру Text.
 * 
 * @return ProgramStatus.
*/
ProgramStatus TextConstructor(Text* text);

/**
 * @brief          Прочитать файл.
 *
 * @param text     Указатель на структуру Text.
 * @param fileName Имя файла.
 * 
 * @return ProgramStatus.
*/
ProgramStatus TextReadFile(Text* text, const char* fileName);

/**
 * @brief Деструктор текста. Очищает всю структуру.
 * 
 * @param text Указатель на структуру Text.
*/
ProgramStatus TextDestructor(Text* text);

//***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\ 
//***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\ 

#endif // !TEXT_H