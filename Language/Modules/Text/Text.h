///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
// Модуль чтения файлов.
//
// Использование:
// 1. Добавить директорию "Modules/Text" с файлами в проект.
//
// 2. Подключить заголовочный файл "Text.h".
//
// 3. Создать пустую структуру Text text = {}.
//
// 4. Для чтения файла вызвать функцию TextConstructor(&text, "file path").
//    Если файл был успешно прочитан функция вернет ProgramStatus::Ok.
//    Содержимое файла будет доступно в динамическом массиве text.Data.
//    Поле text.Size содержит размер массива, который равен размеру файла на диске + 1 (для
//    терминирующего символа '\0').
//
// 5. В конце работы освободить ресурсы вызовом функции TextDestructor.
//
// 6. Чтобы отключить поддержку логов нужно добавить в проект файл "Modules/DisableLogs.h"
//    и в этом файле установить значение true дефайна MODULE_TEXT_DISABLE_LOGS.
//
// Версия: 1.0.1.0
// Дата последнего изменения: 17:51 29.01.2023
//
// Автор: Маслов А.С. (https://github.com/ArtemMaslov).
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#ifndef TEXT_H
#define TEXT_H

#include <stdio.h>

/// Чтобы отключить поддержку логов в модуле, нужно установить значение true.
#define MODULE_TEXT_DISABLE_LOGS false

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

/// Ошибки модуля Text.
enum class TextError
{
	/// Нет ошибок.
	NoErrors,
	/// Ошибка открытия файла.
	FileOpen,
	/// Ошибка выделения памяти.
	Memory,
	/// Ошибка чтения файла.
	FileRead
};

/// Режимы чтения файла.
enum class FileReadMode
{
	/// Файл читается как текстовый (fread из stdio).
	/// Происходит дополнительная обработка файла, например, '\r\n' заменяется на '\n'.
	Text,
	/// Файл читается как бинарный (fread из stdio). Дополнительных обработок файла не происходит.
	Binary
};

/// Структура для чтения текста из файла в массив символов.
struct Text
{
	/// Размер Data.
	size_t Size;
	/// Указатель на начало текста. Текст должен заканчиваться '\0'
	char *Data;
};

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

/**
 * @brief  Прочитать содержимое файла.
 *
 * Открывает файл, читает его содержимое в буфер и закрывает файл.
 * Перед повторным использованием нужно вызвать TextDestructor().
 *
 * @param text     Указатель на структуру Text.
 * @param fileName Имя файла.
 * @param mode     FileReadMode::Text, то файл открывается как текстовый, и в буфер записывается
 *                 обработанный функцией fread стандартной библиотеки Си текст.
 *                 FileReadMode::Binary, то файл читается в бинарном виде без дополнительных обработок.
 *
 * @return TextError::FileOpen, если не удалось открыть файл.
 *         TextError::Memory, если не удалось выделить память для буфера.
 *         TextError::FileRead, если содержимое файла было не правильно прочитано.
 *         TextError::NoErrors, если нет ошибок.
 */
TextError TextConstructor(Text *const text, const char *const fileName, FileReadMode mode = FileReadMode::Text);

/**
 * @brief  Деструктор текста.
 *
 * После вызова деструктора структуру можно повторно использовать.
 *
 * @param text Указатель на структуру Text.
 */
void TextDestructor(Text *const text);

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#endif // !TEXT_H