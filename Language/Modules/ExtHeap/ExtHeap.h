///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
// Модуль выделителя памяти расширяющаяся куча ExtHeap.
// 
// Память выделяется одним блоком с начальным размером EXT_HEAP_DEFAULT_CAPACITY. 
// При добавлении новых элементов, в случае нехватки памяти, происходит автоматическое 
// выделение нового блока памяти с размером в EXT_HEAP_RESIZE_MULTIPLIER раз больше старого.
// Добавленные ранее элементы автоматически копируются в новый блок памяти. После этого
// старый блок памяти освобождается. Добавленные в ExtHeap элементы могут быть произвольного
// размера. Удалять элементы из ExtHeap нельзя. 
// 
// ExtHeap подходит для работы с объектами произвольного размера, когда нужно выделить
// кеш-дружелюбный блок памяти, и в конце работы одним вызовом free освободить все объекты.
//  
// Использование:
// 1. Добавить файл "Modules/ErrorsHandling.h" и директорию "Modules/ExtHeap" в проект.
// 
// 2. Подключить заголовочный файл "ExtHeap.h".
// 
// 3. Создать пустую структуру ExtHeap extHeap = {}.
// 
// 4. Вызвать конструктор ExtHeapConstructor.
// 
// 5. Добавлять элементы можно функцией ExtHeapAllocElem.
// 
// 6. В конце работы освободить ресурсы вызовом ExtHeapDestructor.
// 
// 7. Чтобы отключить поддержку логов нужно добавить в проект файл "Modules/DisableLogs.h",
//    и в этом файле установить значение true дефайна MODULE_EXT_HEAP_DISABLE_LOGS.
// 
// Версия: 1.0.1.1
// Дата последнего изменения: 11:11 03.02.2023
// 
// Автор: Маслов А.С. (https://github.com/ArtemMaslov).
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#ifndef EXT_HEAP_H
#define EXT_HEAP_H

#include "../ErrorsHandling.h"
#include "../TargetOS.h"

/// Чтобы отключить поддержку логов в модуле, нужно установить значение true.
#define MODULE_EXT_HEAP_DISABLE_LOGS false

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

/**
 * @brief  Во сколько раз новый выделяемый блок памяти должен быть больше старого.
 * 
 * Коэффициент должен быть строго больше 1.
 * 
 * Не рекомендуется ставить значение близкое к 1.0, тогда снижается скорость работы
 * из-за частых выделений памяти системой. При больших значениях будет много неиспользуемой
 * памяти.
 * 
 * Наиболее эффективное значение коэффициента должно отдельно подбираться для каждой задачи.
*/
static constexpr float  EXT_HEAP_RESIZE_MULTIPLIER = 2.0;

static_assert(EXT_HEAP_RESIZE_MULTIPLIER > 1);
/**
 * @brief   Начальный размер блока памяти по умолчанию.
 * 
 * Начальный размер блока памяти указывается при вызове конструктора. Наиболее эффективное значение 
 * размера блока памяти такое, чтобы в процессе работы не возникало дополнительных выделений памяти.
 * 
 * Значение данного коэффициента должно отдельно подбираться для каждой задачи.
*/
static const size_t EXT_HEAP_DEFAULT_CAPACITY  = 4096;

/// Расширяющаяся куча.
struct ExtHeap
{
	/// Указатель на динамический блок памяти.
	char*  Heap;

	/// Размер занятой пользователем памяти в байтах.
	size_t Size;
	/// Общий размер выделенного системой блока памяти в байтах.
	size_t Capacity;

	/// Коэффициент выделения памяти.
	float Resize;
	/// Счётчик дополнительных выделений памяти.
	size_t ReallocCounter;
};

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

/**
 * @brief  Конструктор расширяющейся кучи.
 * 
 * Выделяет начальный блок памяти.
 * 
 * @param extHeap  Указатель на проинициализированную нулем структуру ExtHeap.
 * @param capacity Начальный размер блока памяти в байтах.
 * @param resize   Коэффициент выделения памяти.
 * 
 * @return ProgramStatus::Fault, если не удалось выделить память. 
 *	       ProgramStatus::Ok, если нет ошибок.
*/
ProgramStatus ExtHeapConstructor(ExtHeap* const extHeap, 
								 const size_t   capacity = EXT_HEAP_DEFAULT_CAPACITY,
								 const float    resize   = EXT_HEAP_RESIZE_MULTIPLIER);

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

void ExtHeapDestructor(ExtHeap* const extHeap,
					   const char* const funct, const char* const file, const size_t line);

/**
 * @brief  Деструктор расширяющейся кучи.
 * 
 * Если в ходе работы ExtHeap были перевыделения памяти, то сообщение об
 * этом будет записано в файл логов.
 * 
 * После вызова деструктора структуру можно повторно использовать.
 * 
 * @param extHeap Указатель на структуру ExtHeap.
 * 
 * @return void.
*/
#define ExtHeapDestructor(extHeap) \
	ExtHeapDestructor(extHeap, FUNCT_SIG, __FILE__, __LINE__)

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

/**
 * @brief  Выделить блок памяти для элемента в расширяющейся куче.
 * 
 * В случае нехватки памяти для добавления элемента, будет автоматически выделен
 * новый блок памяти размером в EXT_HEAP_RESIZE_MULTIPLIER раз больше. Добавленные 
 * ранее элементы будут скопированы в новый блок памяти. После этого старый блок 
 * памяти освобождается.
 * 
 * @warning Пользователь несёт ответственность за порчу данных, в случае выхода за 
 * границы выделенного блока памяти.
 * 
 * @param extHeap  Указатель на структуру ExtHeap.
 * @param elemSize Размер элемента в байтах.
 * 
 * @return Указатель на начало выделенного блока памяти. 
 *         nullptr, если выделить память не удалось.
*/
void* ExtHeapAllocElem(ExtHeap* const extHeap, const size_t elemSize);

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

void ExtHeapDump(const ExtHeap* const extHeap, 
				 const char* const funct, const char* const file, const size_t line);

/**
 * @brief  Добавить в лог файл сообщение о состоянии ExtHeap.
 * 
 * @param extHeap Указатель на структуру ExtHeap.
 * 
 * @return void.
*/
#define ExtHeapDump(extHeap) \
	ExtHeapDump(extHeap, FUNCT_SIG, __FILE__, __LINE__)

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#endif // !EXT_HEAP_H