	call main
	hlt

main:
	push bx
	push cx
	push bx
	pop cx

	push 0.000000

	pop [cx +0]
	push bx
	push 1
	add
	pop bx

	push 0.000000

	pop [cx +1]
	push bx
	push 1
	add
	pop bx

	push 0.000000

	pop [cx +2]
	push bx
	push 1
	add
	pop bx

	in
	pop [cx +0]

	in
	pop [cx +1]

	in
	pop [cx +2]

	push [cx +2]

	pop [bx]
	push bx
	push 1
	add
	pop bx

	push [cx +1]

	pop [bx]
	push bx
	push 1
	add
	pop bx

	push [cx +0]

	pop [bx]
	push bx
	push 1
	add
	pop bx

	call SolveQuadraticEquation
	push bx
	push 3
	sub
	pop bx

	pop cx
	pop bx
	ret

SolveQuadraticEquation:
	push bx
	push cx
	push bx
	pop cx

	push [cx -1]

	push 0.000000

	jne l_equal_false_1
	push 1
	jmp l_equal_end_1
l_equal_false_1:
	push 0
l_equal_end_1:

	push 1
	jne l_if_false_0

	push [cx -2]

	push 0.000000

	jne l_equal_false_3
	push 1
	jmp l_equal_end_3
l_equal_false_3:
	push 0
l_equal_end_3:

	push 1
	jne l_if_false_2

	push [cx -3]

	push 0.000000

	jne l_equal_false_5
	push 1
	jmp l_equal_end_5
l_equal_false_5:
	push 0
l_equal_end_5:

	push 1
	jne l_if_false_4

	push -1.000000

	out

	jmp l_if_end_4
l_if_false_4:

	push 0.000000

	out

l_if_end_4:

	jmp l_if_end_2
l_if_false_2:

	push 1.000000

	out

	push [cx -3]

	pop ax
	push 0
	push ax
	sub

	push [cx -2]

	div

	out

l_if_end_2:

	jmp l_if_end_0
l_if_false_0:

	push [cx -2]

	push [cx -2]

	mul

	push 4.000000

	push [cx -1]

	mul

	push [cx -3]

	mul

	sub

	pop [cx +0]
	push bx
	push 1
	add
	pop bx

	push [cx +0]

	push 0.000000

	jbe l_greater_false_7
	push 1
	jmp l_greater_end_7
l_greater_false_7:
	push 0
l_greater_end_7:

	push 1
	jne l_if_false_6

	push [cx +0]

	sqrt
	pop ax

	push ax

	pop [cx +0]

	push 2.000000

	out

	push 0.000000

	push [cx -2]

	sub

	push [cx +0]

	add

	push 2.000000

	push [cx -1]

	mul

	div

	out

	push 0.000000

	push [cx -2]

	sub

	push [cx +0]

	sub

	push 2.000000

	push [cx -1]

	mul

	div

	out

	jmp l_if_end_6
l_if_false_6:

	push [cx +0]

	push 0.000000

	jne l_equal_false_9
	push 1
	jmp l_equal_end_9
l_equal_false_9:
	push 0
l_equal_end_9:

	push 1
	jne l_if_false_8

	push 1.000000

	out

	push 0.000000

	push [cx -2]

	sub

	push 2.000000

	push [cx -1]

	mul

	div

	out

	jmp l_if_end_8
l_if_false_8:

	push 0.000000

	out

l_if_end_8:

l_if_end_6:

l_if_end_0:

	pop cx
	pop bx
	ret

